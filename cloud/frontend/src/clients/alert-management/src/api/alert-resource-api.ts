/* tslint:disable */
/* eslint-disable */
/**
 * alert-management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Alert } from '../models';
// @ts-ignore
import type { AlertDTO } from '../models';
/**
 * AlertResourceApi - axios parameter creator
 * @export
 */
export const AlertResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} alertId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertAlertIdDelete: async (alertId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alertId' is not null or undefined
            assertParamExists('alertAlertIdDelete', 'alertId', alertId)
            const localVarPath = `/alert/{alertId}`
                .replace(`{${"alertId"}}`, encodeURIComponent(String(alertId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} alertId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertAlertIdGet: async (alertId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alertId' is not null or undefined
            assertParamExists('alertAlertIdGet', 'alertId', alertId)
            const localVarPath = `/alert/{alertId}`
                .replace(`{${"alertId"}}`, encodeURIComponent(String(alertId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} alertId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertAlertIdMarkTreatedPatch: async (alertId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alertId' is not null or undefined
            assertParamExists('alertAlertIdMarkTreatedPatch', 'alertId', alertId)
            const localVarPath = `/alert/{alertId}/mark-treated`
                .replace(`{${"alertId"}}`, encodeURIComponent(String(alertId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} alertId 
         * @param {AlertDTO} [alertDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertAlertIdPut: async (alertId: string, alertDTO?: AlertDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'alertId' is not null or undefined
            assertParamExists('alertAlertIdPut', 'alertId', alertId)
            const localVarPath = `/alert/{alertId}`
                .replace(`{${"alertId"}}`, encodeURIComponent(String(alertId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(alertDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertDeleteAllDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alert/deleteAll`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gatewayId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertGatewayGatewayIdGet: async (gatewayId: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gatewayId' is not null or undefined
            assertParamExists('alertGatewayGatewayIdGet', 'gatewayId', gatewayId)
            const localVarPath = `/alert/gateway/{gatewayId}`
                .replace(`{${"gatewayId"}}`, encodeURIComponent(String(gatewayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [severity] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertGet: async (limit?: number, offset?: number, severity?: string, type?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (severity !== undefined) {
                localVarQueryParameter['severity'] = severity;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AlertDTO} [alertDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertPost: async (alertDTO?: AlertDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alert`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(alertDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} severity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSeveritySeverityGet: async (severity: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'severity' is not null or undefined
            assertParamExists('alertSeveritySeverityGet', 'severity', severity)
            const localVarPath = `/alert/severity/{severity}`
                .replace(`{${"severity"}}`, encodeURIComponent(String(severity)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertTreatedGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alert/treated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertUntreatedGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alert/untreated`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlertResourceApi - functional programming interface
 * @export
 */
export const AlertResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlertResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} alertId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertAlertIdDelete(alertId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertAlertIdDelete(alertId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlertResourceApi.alertAlertIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} alertId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertAlertIdGet(alertId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alert>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertAlertIdGet(alertId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlertResourceApi.alertAlertIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} alertId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertAlertIdMarkTreatedPatch(alertId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alert>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertAlertIdMarkTreatedPatch(alertId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlertResourceApi.alertAlertIdMarkTreatedPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} alertId 
         * @param {AlertDTO} [alertDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertAlertIdPut(alertId: string, alertDTO?: AlertDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alert>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertAlertIdPut(alertId, alertDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlertResourceApi.alertAlertIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertDeleteAllDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertDeleteAllDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlertResourceApi.alertDeleteAllDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} gatewayId 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertGatewayGatewayIdGet(gatewayId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Alert>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertGatewayGatewayIdGet(gatewayId, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlertResourceApi.alertGatewayGatewayIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {string} [severity] 
         * @param {string} [type] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertGet(limit?: number, offset?: number, severity?: string, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Alert>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertGet(limit, offset, severity, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlertResourceApi.alertGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AlertDTO} [alertDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertPost(alertDTO?: AlertDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Alert>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertPost(alertDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlertResourceApi.alertPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} severity 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertSeveritySeverityGet(severity: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Alert>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertSeveritySeverityGet(severity, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlertResourceApi.alertSeveritySeverityGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertTreatedGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Alert>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertTreatedGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlertResourceApi.alertTreatedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async alertUntreatedGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Alert>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.alertUntreatedGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlertResourceApi.alertUntreatedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AlertResourceApi - factory interface
 * @export
 */
export const AlertResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlertResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {AlertResourceApiAlertAlertIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertAlertIdDelete(requestParameters: AlertResourceApiAlertAlertIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.alertAlertIdDelete(requestParameters.alertId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlertResourceApiAlertAlertIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertAlertIdGet(requestParameters: AlertResourceApiAlertAlertIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Alert> {
            return localVarFp.alertAlertIdGet(requestParameters.alertId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlertResourceApiAlertAlertIdMarkTreatedPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertAlertIdMarkTreatedPatch(requestParameters: AlertResourceApiAlertAlertIdMarkTreatedPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<Alert> {
            return localVarFp.alertAlertIdMarkTreatedPatch(requestParameters.alertId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlertResourceApiAlertAlertIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertAlertIdPut(requestParameters: AlertResourceApiAlertAlertIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Alert> {
            return localVarFp.alertAlertIdPut(requestParameters.alertId, requestParameters.alertDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertDeleteAllDelete(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.alertDeleteAllDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlertResourceApiAlertGatewayGatewayIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertGatewayGatewayIdGet(requestParameters: AlertResourceApiAlertGatewayGatewayIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Alert>> {
            return localVarFp.alertGatewayGatewayIdGet(requestParameters.gatewayId, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlertResourceApiAlertGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertGet(requestParameters: AlertResourceApiAlertGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<Alert>> {
            return localVarFp.alertGet(requestParameters.limit, requestParameters.offset, requestParameters.severity, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlertResourceApiAlertPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertPost(requestParameters: AlertResourceApiAlertPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Alert> {
            return localVarFp.alertPost(requestParameters.alertDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AlertResourceApiAlertSeveritySeverityGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertSeveritySeverityGet(requestParameters: AlertResourceApiAlertSeveritySeverityGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<Alert>> {
            return localVarFp.alertSeveritySeverityGet(requestParameters.severity, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertTreatedGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Alert>> {
            return localVarFp.alertTreatedGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        alertUntreatedGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Alert>> {
            return localVarFp.alertUntreatedGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for alertAlertIdDelete operation in AlertResourceApi.
 * @export
 * @interface AlertResourceApiAlertAlertIdDeleteRequest
 */
export interface AlertResourceApiAlertAlertIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof AlertResourceApiAlertAlertIdDelete
     */
    readonly alertId: string
}

/**
 * Request parameters for alertAlertIdGet operation in AlertResourceApi.
 * @export
 * @interface AlertResourceApiAlertAlertIdGetRequest
 */
export interface AlertResourceApiAlertAlertIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AlertResourceApiAlertAlertIdGet
     */
    readonly alertId: string
}

/**
 * Request parameters for alertAlertIdMarkTreatedPatch operation in AlertResourceApi.
 * @export
 * @interface AlertResourceApiAlertAlertIdMarkTreatedPatchRequest
 */
export interface AlertResourceApiAlertAlertIdMarkTreatedPatchRequest {
    /**
     * 
     * @type {string}
     * @memberof AlertResourceApiAlertAlertIdMarkTreatedPatch
     */
    readonly alertId: string
}

/**
 * Request parameters for alertAlertIdPut operation in AlertResourceApi.
 * @export
 * @interface AlertResourceApiAlertAlertIdPutRequest
 */
export interface AlertResourceApiAlertAlertIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof AlertResourceApiAlertAlertIdPut
     */
    readonly alertId: string

    /**
     * 
     * @type {AlertDTO}
     * @memberof AlertResourceApiAlertAlertIdPut
     */
    readonly alertDTO?: AlertDTO
}

/**
 * Request parameters for alertGatewayGatewayIdGet operation in AlertResourceApi.
 * @export
 * @interface AlertResourceApiAlertGatewayGatewayIdGetRequest
 */
export interface AlertResourceApiAlertGatewayGatewayIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AlertResourceApiAlertGatewayGatewayIdGet
     */
    readonly gatewayId: string

    /**
     * 
     * @type {number}
     * @memberof AlertResourceApiAlertGatewayGatewayIdGet
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof AlertResourceApiAlertGatewayGatewayIdGet
     */
    readonly offset?: number
}

/**
 * Request parameters for alertGet operation in AlertResourceApi.
 * @export
 * @interface AlertResourceApiAlertGetRequest
 */
export interface AlertResourceApiAlertGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AlertResourceApiAlertGet
     */
    readonly limit?: number

    /**
     * 
     * @type {number}
     * @memberof AlertResourceApiAlertGet
     */
    readonly offset?: number

    /**
     * 
     * @type {string}
     * @memberof AlertResourceApiAlertGet
     */
    readonly severity?: string

    /**
     * 
     * @type {string}
     * @memberof AlertResourceApiAlertGet
     */
    readonly type?: string
}

/**
 * Request parameters for alertPost operation in AlertResourceApi.
 * @export
 * @interface AlertResourceApiAlertPostRequest
 */
export interface AlertResourceApiAlertPostRequest {
    /**
     * 
     * @type {AlertDTO}
     * @memberof AlertResourceApiAlertPost
     */
    readonly alertDTO?: AlertDTO
}

/**
 * Request parameters for alertSeveritySeverityGet operation in AlertResourceApi.
 * @export
 * @interface AlertResourceApiAlertSeveritySeverityGetRequest
 */
export interface AlertResourceApiAlertSeveritySeverityGetRequest {
    /**
     * 
     * @type {string}
     * @memberof AlertResourceApiAlertSeveritySeverityGet
     */
    readonly severity: string
}

/**
 * AlertResourceApi - object-oriented interface
 * @export
 * @class AlertResourceApi
 * @extends {BaseAPI}
 */
export class AlertResourceApi extends BaseAPI {
    /**
     * 
     * @param {AlertResourceApiAlertAlertIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertResourceApi
     */
    public alertAlertIdDelete(requestParameters: AlertResourceApiAlertAlertIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return AlertResourceApiFp(this.configuration).alertAlertIdDelete(requestParameters.alertId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlertResourceApiAlertAlertIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertResourceApi
     */
    public alertAlertIdGet(requestParameters: AlertResourceApiAlertAlertIdGetRequest, options?: RawAxiosRequestConfig) {
        return AlertResourceApiFp(this.configuration).alertAlertIdGet(requestParameters.alertId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlertResourceApiAlertAlertIdMarkTreatedPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertResourceApi
     */
    public alertAlertIdMarkTreatedPatch(requestParameters: AlertResourceApiAlertAlertIdMarkTreatedPatchRequest, options?: RawAxiosRequestConfig) {
        return AlertResourceApiFp(this.configuration).alertAlertIdMarkTreatedPatch(requestParameters.alertId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlertResourceApiAlertAlertIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertResourceApi
     */
    public alertAlertIdPut(requestParameters: AlertResourceApiAlertAlertIdPutRequest, options?: RawAxiosRequestConfig) {
        return AlertResourceApiFp(this.configuration).alertAlertIdPut(requestParameters.alertId, requestParameters.alertDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertResourceApi
     */
    public alertDeleteAllDelete(options?: RawAxiosRequestConfig) {
        return AlertResourceApiFp(this.configuration).alertDeleteAllDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlertResourceApiAlertGatewayGatewayIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertResourceApi
     */
    public alertGatewayGatewayIdGet(requestParameters: AlertResourceApiAlertGatewayGatewayIdGetRequest, options?: RawAxiosRequestConfig) {
        return AlertResourceApiFp(this.configuration).alertGatewayGatewayIdGet(requestParameters.gatewayId, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlertResourceApiAlertGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertResourceApi
     */
    public alertGet(requestParameters: AlertResourceApiAlertGetRequest = {}, options?: RawAxiosRequestConfig) {
        return AlertResourceApiFp(this.configuration).alertGet(requestParameters.limit, requestParameters.offset, requestParameters.severity, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlertResourceApiAlertPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertResourceApi
     */
    public alertPost(requestParameters: AlertResourceApiAlertPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AlertResourceApiFp(this.configuration).alertPost(requestParameters.alertDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AlertResourceApiAlertSeveritySeverityGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertResourceApi
     */
    public alertSeveritySeverityGet(requestParameters: AlertResourceApiAlertSeveritySeverityGetRequest, options?: RawAxiosRequestConfig) {
        return AlertResourceApiFp(this.configuration).alertSeveritySeverityGet(requestParameters.severity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertResourceApi
     */
    public alertTreatedGet(options?: RawAxiosRequestConfig) {
        return AlertResourceApiFp(this.configuration).alertTreatedGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlertResourceApi
     */
    public alertUntreatedGet(options?: RawAxiosRequestConfig) {
        return AlertResourceApiFp(this.configuration).alertUntreatedGet(options).then((request) => request(this.axios, this.basePath));
    }
}

