/* tslint:disable */
/* eslint-disable */
/**
 * patient-management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Patient } from '../models';
// @ts-ignore
import type { PatientDTO } from '../models';
/**
 * PatientResourceApi - axios parameter creator
 * @export
 */
export const PatientResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} firstname 
         * @param {string} lastname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientFindByNameGet: async (firstname: string, lastname: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'firstname' is not null or undefined
            assertParamExists('patientFindByNameGet', 'firstname', firstname)
            // verify required parameter 'lastname' is not null or undefined
            assertParamExists('patientFindByNameGet', 'lastname', lastname)
            const localVarPath = `/patient/findByName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (firstname !== undefined) {
                localVarQueryParameter['firstname'] = firstname;
            }

            if (lastname !== undefined) {
                localVarQueryParameter['lastname'] = lastname;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} gatewayId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientGatewayGatewayIdGet: async (gatewayId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'gatewayId' is not null or undefined
            assertParamExists('patientGatewayGatewayIdGet', 'gatewayId', gatewayId)
            const localVarPath = `/patient/gateway/{gatewayId}`
                .replace(`{${"gatewayId"}}`, encodeURIComponent(String(gatewayId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientPatientIdDelete: async (patientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('patientPatientIdDelete', 'patientId', patientId)
            const localVarPath = `/patient/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientPatientIdGet: async (patientId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'patientId' is not null or undefined
            assertParamExists('patientPatientIdGet', 'patientId', patientId)
            const localVarPath = `/patient/{patientId}`
                .replace(`{${"patientId"}}`, encodeURIComponent(String(patientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PatientDTO} [patientDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientPost: async (patientDTO?: PatientDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/patient`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patientDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PatientResourceApi - functional programming interface
 * @export
 */
export const PatientResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PatientResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} firstname 
         * @param {string} lastname 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patientFindByNameGet(firstname: string, lastname: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<Patient>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patientFindByNameGet(firstname, lastname, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientResourceApi.patientFindByNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} gatewayId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patientGatewayGatewayIdGet(gatewayId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patientGatewayGatewayIdGet(gatewayId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientResourceApi.patientGatewayGatewayIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patientPatientIdDelete(patientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patientPatientIdDelete(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientResourceApi.patientPatientIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} patientId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patientPatientIdGet(patientId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patientPatientIdGet(patientId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientResourceApi.patientPatientIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PatientDTO} [patientDTO] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patientPost(patientDTO?: PatientDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Patient>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patientPost(patientDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PatientResourceApi.patientPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PatientResourceApi - factory interface
 * @export
 */
export const PatientResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PatientResourceApiFp(configuration)
    return {
        /**
         * 
         * @param {PatientResourceApiPatientFindByNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientFindByNameGet(requestParameters: PatientResourceApiPatientFindByNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Set<Patient>> {
            return localVarFp.patientFindByNameGet(requestParameters.firstname, requestParameters.lastname, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatientResourceApiPatientGatewayGatewayIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientGatewayGatewayIdGet(requestParameters: PatientResourceApiPatientGatewayGatewayIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Patient> {
            return localVarFp.patientGatewayGatewayIdGet(requestParameters.gatewayId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatientResourceApiPatientPatientIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientPatientIdDelete(requestParameters: PatientResourceApiPatientPatientIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.patientPatientIdDelete(requestParameters.patientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatientResourceApiPatientPatientIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientPatientIdGet(requestParameters: PatientResourceApiPatientPatientIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Patient> {
            return localVarFp.patientPatientIdGet(requestParameters.patientId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {PatientResourceApiPatientPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patientPost(requestParameters: PatientResourceApiPatientPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Patient> {
            return localVarFp.patientPost(requestParameters.patientDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for patientFindByNameGet operation in PatientResourceApi.
 * @export
 * @interface PatientResourceApiPatientFindByNameGetRequest
 */
export interface PatientResourceApiPatientFindByNameGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PatientResourceApiPatientFindByNameGet
     */
    readonly firstname: string

    /**
     * 
     * @type {string}
     * @memberof PatientResourceApiPatientFindByNameGet
     */
    readonly lastname: string
}

/**
 * Request parameters for patientGatewayGatewayIdGet operation in PatientResourceApi.
 * @export
 * @interface PatientResourceApiPatientGatewayGatewayIdGetRequest
 */
export interface PatientResourceApiPatientGatewayGatewayIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PatientResourceApiPatientGatewayGatewayIdGet
     */
    readonly gatewayId: string
}

/**
 * Request parameters for patientPatientIdDelete operation in PatientResourceApi.
 * @export
 * @interface PatientResourceApiPatientPatientIdDeleteRequest
 */
export interface PatientResourceApiPatientPatientIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof PatientResourceApiPatientPatientIdDelete
     */
    readonly patientId: string
}

/**
 * Request parameters for patientPatientIdGet operation in PatientResourceApi.
 * @export
 * @interface PatientResourceApiPatientPatientIdGetRequest
 */
export interface PatientResourceApiPatientPatientIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof PatientResourceApiPatientPatientIdGet
     */
    readonly patientId: string
}

/**
 * Request parameters for patientPost operation in PatientResourceApi.
 * @export
 * @interface PatientResourceApiPatientPostRequest
 */
export interface PatientResourceApiPatientPostRequest {
    /**
     * 
     * @type {PatientDTO}
     * @memberof PatientResourceApiPatientPost
     */
    readonly patientDTO?: PatientDTO
}

/**
 * PatientResourceApi - object-oriented interface
 * @export
 * @class PatientResourceApi
 * @extends {BaseAPI}
 */
export class PatientResourceApi extends BaseAPI {
    /**
     * 
     * @param {PatientResourceApiPatientFindByNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientResourceApi
     */
    public patientFindByNameGet(requestParameters: PatientResourceApiPatientFindByNameGetRequest, options?: RawAxiosRequestConfig) {
        return PatientResourceApiFp(this.configuration).patientFindByNameGet(requestParameters.firstname, requestParameters.lastname, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PatientResourceApiPatientGatewayGatewayIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientResourceApi
     */
    public patientGatewayGatewayIdGet(requestParameters: PatientResourceApiPatientGatewayGatewayIdGetRequest, options?: RawAxiosRequestConfig) {
        return PatientResourceApiFp(this.configuration).patientGatewayGatewayIdGet(requestParameters.gatewayId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PatientResourceApiPatientPatientIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientResourceApi
     */
    public patientPatientIdDelete(requestParameters: PatientResourceApiPatientPatientIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return PatientResourceApiFp(this.configuration).patientPatientIdDelete(requestParameters.patientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PatientResourceApiPatientPatientIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientResourceApi
     */
    public patientPatientIdGet(requestParameters: PatientResourceApiPatientPatientIdGetRequest, options?: RawAxiosRequestConfig) {
        return PatientResourceApiFp(this.configuration).patientPatientIdGet(requestParameters.patientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {PatientResourceApiPatientPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PatientResourceApi
     */
    public patientPost(requestParameters: PatientResourceApiPatientPostRequest = {}, options?: RawAxiosRequestConfig) {
        return PatientResourceApiFp(this.configuration).patientPost(requestParameters.patientDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

